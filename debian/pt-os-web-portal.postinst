#!/bin/bash
###############################################################
#                Unofficial 'Bash strict mode'                #
# http://redsymbol.net/articles/unofficial-bash-strict-mode/  #
###############################################################
set -euo pipefail
IFS=$'\n\t'
###############################################################

get_reverse_dependencies() {
	apt-cache rdepends --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances --installed $1 2>/dev/null | uniq | grep -v -E "Reverse Depends:|$1" | xargs
}

is_installed() {
	package_name="$1"
	[ -n "$(apt-cache policy "$package_name" 2>/dev/null | grep -E '^[[:space:]]*Installed:')" ]
	return $?
}

case "$1" in
configure)
	# if network-manager-gnome was manually installed, skip
	if [ $(apt show network-manager-gnome 2>/dev/null | grep APT-Manual-Installed | awk '{print $2}') = "no" ]; then
		# prevent nm-applet from auto starting if pt-os-web-portal is the only package that has network-manager-gnome as a dependency
		PACKAGES=$(get_reverse_dependencies network-manager-gnome)
		if [[ $PACKAGES == "pt-os-web-portal" ]]; then
			if grep -q -v "Hidden=true" /etc/xdg/autostart/nm-applet.desktop; then
				echo "Hidden=true" >>/etc/xdg/autostart/nm-applet.desktop
			fi
		fi
	fi

	# don't restart networking services during upgrade to avoid client disconnects
	if is_installed hostapd; then
		/usr/lib/pt-os-web-portal/handle-service-restart-in-policy add hostapd
		/usr/lib/pt-os-web-portal/handle-service-restart-in-policy add hostapd.service
	fi
	if is_installed isc-dhcp-server; then
		/usr/lib/pt-os-web-portal/handle-service-restart-in-policy add isc-dhcp-server
		/usr/lib/pt-os-web-portal/handle-service-restart-in-policy add isc-dhcp-server.service
	fi
	if is_installed network-manager; then
		/usr/lib/pt-os-web-portal/handle-service-restart-in-policy add NetworkManager
		/usr/lib/pt-os-web-portal/handle-service-restart-in-policy add NetworkManager.service
	fi

	LAST_UPDATE_FOLDER="/var/lib/pt-os-web-portal"
	STATE_FILE="${LAST_UPDATE_FOLDER}/state.cfg"

	# only when upgrading the pt-os-web-portal package...
	# ($2 is the old version when calling this postinst script)
	if [ -n "$2" ]; then
		# web-portal won't have a state file unless the pi-top has already been onboarded
		if [ ! -f "${STATE_FILE}" ]; then
			# create a state file to ensure the onboarding and miniscreen onboarding assistant app runs
			mkdir -p "${LAST_UPDATE_FOLDER}"
			cat >"${STATE_FILE}" <<EOL
[app]
onboarded = false

[onboarding]
start_miniscreen_app = true
EOL
		fi
	fi

	;;

abort-upgrade | abort-remove | abort-deconfigure | try-restart | triggered) ;;

*)
	echo "postinst called with unknown argument \`$1'" >&2
	exit 1
	;;
esac

#DEBHELPER#
